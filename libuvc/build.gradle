plugins {
	id 'com.android.library'
}

import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdk = rootProject.ext.versionCompiler

	defaultConfig {
		minSdk = rootProject.ext.minSdkVersion
		targetSdk = rootProject.ext.versionTarget
		namespace = "com.jiangdg.ausbc"
	}

	compileOptions {
		sourceCompatibility = rootProject.ext.javaSourceCompatibility
		targetCompatibility = rootProject.ext.javaTargetCompatibility
	}


	buildTypes {
		release {
			minifyEnabled = false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.txt'
		}
	}
	lint {
		abortOnError false
		checkReleaseBuilds false
		disable 'MissingTranslation'
	}
}

def getNdkBuildPath() {
	def ndkBuildingDir = System.getenv("NDK_HOME")
	if (!ndkBuildingDir) {
		Properties properties = new Properties()
		properties.load(project.rootProject.file('local.properties').newDataInputStream())
		ndkBuildingDir = properties.getProperty("ndk.dir")
	}
	def ndkBuildPath = ndkBuildingDir
	return Os.isFamily(Os.FAMILY_WINDOWS) ? "$ndkBuildingDir/ndk-build.cmd" : "$ndkBuildingDir/ndk-build"
}

task ndkBuild(type: Exec) {
	group = "build"
	description = "Compile JNI source via NDK"
	def ndkBuildPath = getNdkBuildPath()
	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec) {
	group = "clean"
	description = "Clean JNI libraries"
	def ndkBuildPath = getNdkBuildPath()
	commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

clean.dependsOn ndkClean

dependencies {
	implementation fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')
	implementation "androidx.appcompat:appcompat:${rootProject.ext.androidXVersion}"
	implementation 'com.elvishew:xlog:1.11.0'
}
